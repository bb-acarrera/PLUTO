<div >
	{{#link-to 'rulesets' tagName='button' class='btn btn-success btn-sm btn-return-title'}}
		{{#bs-tooltip placement="left"}}Return to main page{{/bs-tooltip}}
        <i class="fa fa-angle-double-left"></i>
	{{/link-to}}


	<h2>Validation Setup for

		{{#if  model.ruleset.source}}
			{{source.description}} {{model.ruleset.source.config.file}}
		{{else}}
			{{model.ruleset.filename}}
		{{/if}}

	</h2>

</div>

<div class="authDetails">
    <div>Owned by {{ownedBy}}</div>
    <div>Lasted edited on {{lastEdited}} by {{lastEditedBy}}</div>
</div>

Process URL: {{processURL}}

<div class="ruleset-content" >

	<div class="section-content ruleset-section-content">Name: {{input id="rulesetName" type="text"
		value=model.ruleset.name class="text-input" disabled=disableEdit}}
	</div>

    <!-- Reporting -->
	{{#edit-ruleset/collapse collapsed=false as |c| }}

		{{#c.title}}
            Notification
		{{/c.title}}

		{{#c.collapsable}}
			{{#each model.ruleset.reporters as |reporterInstance|}}
				<div class="ruleset-reporter">
					<div>
						<span class="ruleset-reporter-title">{{reporterInstance.title}}</span>
						<span>
							-
							{{#if (eq reporterInstance.sendOn "failed")}}
								Sent on Error only
							{{else if (eq reporterInstance.sendOn "warned")}}
                                Sent on Error, Warning, or Dropped
							{{else}}
								Sent always
							{{/if}}
						</span>

					</div>
					<div class="ruleset-reporter-config">
						{{component 'custom-property.property-list'
						uiList=(compute (action "getUiProperties") model.reporters reporterInstance.filename)
						config=(get reporterInstance "config")
						disabled=disableEdit
						columns=columns
						validators=(compute (action "getUiValidators") model.reporters reporterInstance.filename)
						state=propStates
						instanceName=reporterInstance.filename
						validateOnInit=true
						}}
                    </div>
				</div>

			{{/each}}

		{{/c.collapsable}}

	{{/edit-ruleset/collapse}}

	<!-- source -->
	{{#edit-ruleset/collapse  as |c|}}

		{{#c.title}}
            Download from:
		{{/c.title}}

		{{#c.subTitle}}
			{{#if model.ruleset.source}}
				{{model.ruleset.source.config.file}} in {{source.description}}
			{{else}}
                None
			{{/if}}
		{{/c.subTitle}}

		{{#c.controls}}
			{{#unless disableEdit}}
                <div style="float: right; width:100%; display: inline-flex; justify-content: flex-end">

					{{#if showChangeSource}}

                        <div style="width:80%;display: inline-block;margin-right: 5px; flex: 1" onclick={{action "stopPropagation"}}>
							{{#power-select
							options=model.defaultSources
							search=(action "searchSource")
							onchange=(action "setSource" bubbles=false)
							selected=source
							renderInPlace=true
							as |sourceChoice|}}
								{{sourceChoice.description}}
							{{/power-select}}
                        </div>

                        <div style="display: inline-block">
							{{#bs-button onClick=(action (toggle "showChangeSource" this) bubbles=false) size='sm'}}
                                Cancel
							{{/bs-button}}
                        </div>



					{{else}}
                        <div style="display: inline-block;float:right">
							{{#bs-button onClick=(action (toggle "showChangeSource" this) bubbles=false) size='sm'}}
                                Change
							{{/bs-button}}
                        </div>
					{{/if}}
                </div>
			{{/unless}}
		{{/c.controls}}

		{{#c.collapsable}}
			{{#if source}}

				{{component 'custom-property.property-list' uiList=source.ui.properties
				config=model.ruleset.source.config
				disabled=disableEdit
				validators=source.validators
				state=propStates
				instanceName='source'
				columns=columns}}

			{{/if}}

		{{/c.collapsable}}
	{{/edit-ruleset/collapse}}

    <!-- target -->
	{{#unless source.config.linkedtargetid}}

		{{#edit-ruleset/collapse  as |c|}}

			{{#c.title}}
                Upload to:
			{{/c.title}}

			{{#c.subTitle}}
				{{#if model.ruleset.target}}
					{{model.ruleset.target.config.file}} in {{rulesettarget.description}}
				{{else}}
                    None
				{{/if}}
			{{/c.subTitle}}

			{{#c.controls}}
				{{#unless disableEdit}}
                    <div style="float: right; width:100%; display: flex; justify-content: flex-end">

						{{#if showChangeTarget}}

                            <div style="display: inline-block;margin-right: 5px;flex: 1" onclick={{action "stopPropagation"}}>
								{{#power-select
								options=model.defaultTargets
								search=(action "searchTarget")
								onchange=(action "setTarget" bubbles=false)
								selected=rulesettarget
								renderInPlace=true
								as |targetChoice|}}
									{{targetChoice.description}}
								{{/power-select}}
                            </div>

                            <div style="display: inline-block">
								{{#bs-button onClick=(action (toggle "showChangeTarget" this) bubbles=false) size='sm'}}
                                    Cancel
								{{/bs-button}}
                            </div>

						{{else}}
                            <div style="display: inline-block;">
								{{#bs-button onClick=(action (toggle "showChangeTarget" this) bubbles=false) size='sm'}}
                                    Change
								{{/bs-button}}
                            </div>
						{{/if}}
                    </div>
				{{/unless}}
			{{/c.controls}}

			{{#c.collapsable}}
				{{#if rulesettarget}}

					{{component 'custom-property.property-list' uiList=rulesettarget.ui.properties
					config=model.ruleset.target.config
					disabled=disableEdit
					validators=rulesettarget.validators
					state=propStates
					instanceName='target'
					columns=columns}}

				{{/if}}

			{{/c.collapsable}}
		{{/edit-ruleset/collapse}}


	{{/unless}}

    <!-- import -->
	{{#if model.ruleset.import}}
        {{#edit-ruleset/collapse as |c|}}

			{{#c.title}}
            	Importer:
			{{/c.title}}

			{{#c.subTitle}}
				{{#if model.ruleset.import}}
					{{model.ruleset.import.filename}}
				{{else}}
					None
				{{/if}}
			{{/c.subTitle}}

			{{#c.collapsable}}
				{{component 'custom-property.property-list'
				uiList=(compute (action "getUiProperties") model.importers model.ruleset.import.filename)
				config=model.ruleset.import.config
				disabled=disableEdit
				validators=(compute (action "getUiValidators") model.importers model.ruleset.import.filename)
				state=propStates
				instanceName="import"
				columns=columns}}
			{{/c.collapsable}}
		{{/edit-ruleset/collapse}}

	{{/if}}

    <!-- export -->
	{{#if model.ruleset.export}}
        {{#edit-ruleset/collapse as |c|}}

			{{#c.title}}
            	Exporter:
			{{/c.title}}

			{{#c.subTitle}}
				{{#if model.ruleset.export}}
					{{model.ruleset.export.filename}}
				{{else}}
					None
				{{/if}}
			{{/c.subTitle}}

			{{#c.collapsable}}
				{{component 'custom-property.property-list'
				uiList=(compute (action "getUiProperties") model.exporters model.ruleset.export.filename)
				config=model.ruleset.export.config
				disabled=disableEdit
				validators=(compute (action "getUiValidators") model.exporters model.ruleset.export.filename)
				state=propStates
				instanceName="export"
				columns=columns}}
			{{/c.collapsable}}
		{{/edit-ruleset/collapse}}

	{{/if}}

{{#if (not-eq model.ruleset.dovalidate false)}}
    <!-- parser -->
	{{#edit-ruleset/collapse collapsed=false as |c|}}

		{{#c.title}}
            Parser:
		{{/c.title}}

		{{#c.subTitle}}
			{{#if model.ruleset.parser}}
				{{model.ruleset.parser.filename}}
			{{else}}
                None
			{{/if}}
		{{/c.subTitle}}

		{{#c.collapsable}}
			{{component 'custom-property.property-list'
			uiList=(compute (action "getUiProperties") model.parsers model.ruleset.parser.filename)
			config=model.ruleset.parser.config
			disabled=disableEdit
			validators=(compute (action "getUiValidators") model.parsers model.ruleset.parser.filename)
			state=propStates
			validateOnInit=true
			instanceName="import"
			columns=columns}}
		{{/c.collapsable}}
	{{/edit-ruleset/collapse}}

    <!-- general config -->
	{{#edit-ruleset/collapse collapsed=false as |c| }}

		{{#c.title}}
            Global Configuration
		{{/c.title}}

		{{#c.collapsable}}
			{{component 'custom-property.property-list'
			uiList=(compute (action "getUiProperties") model.rulesetconfiguis model.ruleset.general.filename)
			config=model.ruleset.general.config
			disabled=disableEdit
			validators=(compute (action "getUiValidators") model.rulesetconfiguis model.ruleset.general.filename)
			state=propStates
			instanceName="generalConfig"
			validateOnInit=true
			columns=columns}}
		{{/c.collapsable}}

	{{/edit-ruleset/collapse}}
{{/if}}
	<!-- custom fields -->
{{#if (gt model.custom.length 0)}}
	{{#edit-ruleset/collapse collapsed=false as |c| }}

		{{#c.title}}
			Additional Information
		{{/c.title}}

		{{#c.collapsable}}
			{{component 'custom-property.property-list'
						uiList=(compute (action "getUiProperties") model.custom model.ruleset.custom.filename)
						config=model.ruleset.custom.config
						disabled=disableEdit
						validators=(compute (action "getUiValidators") model.rulesetconfiguis model.ruleset.custom.filename)
						state=propStates
						validateOnInit=true
						instanceName="custom"
						columns=columns}}
		{{/c.collapsable}}

	{{/edit-ruleset/collapse}}
{{/if}}
	{{#if (not-eq model.ruleset.dovalidate false)}}

		<!-- periodicity -->
		{{#edit-ruleset/collapse collapsed=false as |c| }}

			{{#c.title}}
				File Update Frequency
			{{/c.title}}

			{{#c.collapsable}}
				{{component 'custom-property.property-list'
							uiList=(compute (action "getUiProperties") model.periodicity model.ruleset.periodicity.filename)
							config=model.ruleset.periodicity.config
							disabled=disableEdit
							validators=(compute (action "getUiValidators") model.rulesetconfiguis model.ruleset.periodicity.filename)
							state=propStates
							instanceName="periodicity"
							columns=columns}}
			{{/c.collapsable}}

		{{/edit-ruleset/collapse}}


		<div class="section-header">Rules</div>

	{{#each model.ruleset.rules as |ruleInstance index|}}

		{{#edit-ruleset/collapse initialCollapsed=(get this (concat "collapseRule" ruleInstance.config.id) ) as |c| }}
			{{#c.subTitle}}
				<span class="rule-header">
					{{compute (action "getTitle") model.rules ruleInstance.filename}}
					{{#unless (eq ruleInstance.name ruleInstance.filename)}}
						- {{ruleInstance.name}}
					{{/unless}}
					{{#if (compute (action "getLongDescription") model.rules ruleInstance.filename)}}
						<i class="fa fa-info-circle fa-fw info-color">
							{{#bs-popover triggerEvents="hover" onShow=(action "hideTooltip")}}{{compute (action "getLongDescription") model.rules ruleInstance.filename}}{{/bs-popover}}
						</i>
					{{/if}}
					{{#if (compute (action "getShortDescription") model.rules ruleInstance.filename)}}
						{{#bs-tooltip autoPlacement="true"}}{{compute (action "getShortDescription") model.rules ruleInstance.filename}}{{/bs-tooltip}}
					{{/if}}
				</span>
			{{/c.subTitle}}

			{{#c.controls}}
				{{#unless disableEdit}}

					<span style="float: right">
						{{#bs-button onClick=(action "moveRuleUp" model.ruleset index bubbles=false) size='sm'}}
                            <i class="fa fa-arrow-up"></i>
						{{/bs-button}}

						{{#bs-button onClick=(action "moveRuleDown" model.ruleset index bubbles=false) size='sm'}}
                            <i class="fa fa-arrow-down"></i>
						{{/bs-button}}

						{{#bs-button onClick=(action "deleteRule" ruleInstance bubbles=false) size='sm'}}
                            <i class="fa fa-trash"></i>
						{{/bs-button}}
					</span>


				{{/unless}}
			{{/c.controls}}

			{{#c.collapsable}}
				<div>
					Description {{input type="text" value=(mut ruleInstance.name) disabled=disabled}}
				</div>
				{{component 'custom-property.property-list'
				uiList=(compute (action "getUiProperties") model.rules ruleInstance.filename)
				config=(get ruleInstance "config")
				disabled=disableEdit
				columns=columns
				validators=(compute (action "getUiValidators") model.rules ruleInstance.filename)
				state=propStates
				validateOnInit=ruleInstance.newrule
				instanceName=(concat "rule" ruleInstance.filename)
				}}
			{{/c.collapsable}}
		{{/edit-ruleset/collapse}}

	{{/each}}
	{{#if showAddRule}}
		<div class="section-content ruleset-section-content"
			 style="float: right; width:100%; display: flex; justify-content: flex-end">

            <div style="display: inline-block;margin-right: 5px;flex: 1" onclick={{action "stopPropagation"}}>
				{{#power-select
				options=rules
				matcher=ruleMatcher
				onchange=(action "addRule" bubbles=false)
				renderInPlace=true
				initiallyOpened=true
				as |ruleChoice|}}
					{{if ruleChoice.title ruleChoice.title ruleChoice.name}}
				{{/power-select}}
			</div>

            <button {{action "hideAddRule"}}>Cancel</button>

		</div>
	{{/if}}


	{{#if (not disableEdit)}}

		<span style="float: left">
			{{#bs-button onClick=(action "showAddRule")}}
                <i class="fa fa-plus"></i>
			{{/bs-button}}
        </span>




	{{/if}}
{{else}}
	<h3>
        Pass-through only - file is not validated.
	</h3>

{{/if}}
</div>

{{#unless processing}}

	{{#unless applicationController.currentUser.features.hideTestButtons}}
		{{#bs-button onClick=(action "runRuleset" true) disabled=changed}}
            Test
		{{/bs-button}}
        <span class={{concat "fileUpload btn btn-default " (if changed "disabled" )}}>
			<span>Test from local file</span>

				{{#unless changed}}
					{{file-upload url="/api/v1/processupload" ruleset=model.ruleset.filename completion=(action "toggleUpload") status=(action "showProcessing") disabled=changed}}
				{{/unless}}
		</span>
	{{/unless}}

	{{#bs-dropdown as |dd|}}
		{{#bs-button onClick=(action "runRuleset") disabled=changed}}Upload{{/bs-button}}
		{{#dd.button  disabled=changed}}<span class="caret"></span>{{/dd.button}}
		{{#dd.menu as |menudrops|}}
			{{#menudrops.item}}
				{{#bs-button onClick=(action "runRuleset" false true) disabled=changed class="md5button"}}Skip MD5 check{{/bs-button}}
			{{/menudrops.item}}
		{{/dd.menu}}
	{{/bs-dropdown}}

	{{#if changed}}
		You must save your changes to use
	{{/if}}



{{/unless}}

{{#if (not disableEdit)}}
    <span style="float: right">

		{{#bs-button onClick=(action "deleteRuleset")}}
            Delete
		{{/bs-button}}

		{{#bs-button onClick=(action "saveRuleSet" model.ruleset) disabled=invalid}}
            Save
		{{/bs-button}}
    </span>
{{/if}}

{{#if processing}}
    <i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>
    <span>Processing...</span>
{{/if}}

{{#unless processing}}
	{{#bs-collapse collapsed=collapsedRun}}
		{{outlet}}
	{{/bs-collapse}}
{{/unless}}
