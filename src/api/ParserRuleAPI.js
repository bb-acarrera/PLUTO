const ErrorHandlerAPI = require('./errorHandlerAPI');
const BaseRuleAPI = require('./BaseRuleAPI');




/**
 * This API class is used to describe the interface to rule operations. This base class can be used by rules that
 * interact with operators.
 */
class ParserRuleAPI extends ErrorHandlerAPI {

    /**
     * The base constructor. This simply sets <code>this.config</code> to the passed in configuration object. This config object
     * will be the rule's individual configuration (if any) and additionally contain <code>RootDirectory</code> which defaults to
     * the application's root directory if not set, <code>TempDirectory</code> which defaults to the application's temporary
     * directory if not set, <code>OutputEncoding</code> which is set to the rule's Encoding if set or to the ruleset's Encoding
     * if set, and <code>utf8</code> if none are set, and <code>Encoding</code> which is set to the input file's encoding. (Note
     * the distinction between <code>Encoding</code> and <code>OutputEncoding</code>. <code>Encoding</code> is set to the source file's encoding and
     * <code>OutputEncoding</code> is set to the encoding of the file generated by the rule. In general these would be the same
     * but rule's may want to switch one uncommon encoding for another more common one.)
     * @param localConfig {object} the rule's configuration as defined in the ruleset file or a standalone config file.
     */
    constructor(localConfig) {
        super(localConfig);

        if(this.config && this.config.errors && this.config.errors.onError) {
            this.excludeRecordOnError = this.config.errors.onError == 'excludeRow';
        } else {
            this.excludeRecordOnError = false;
        }


    }

    /**
     * Append config properties to a supplied list
     * @param inProperties the list of properties to append to
     * @returns {Array}
     */
    static appendConfigProperties(inProperties) {

        const properties = [
            {
                name: 'onError',
                label: 'Action on error: ',
                type: 'choice',
                choices: [
                    'abort',
                    'excludeRow']
            }
        ];

        let props;

        if(inProperties) {
            props = inProperties.concat(properties);
        } else {
            props = [].concat(properties);
        }

        return BaseRuleAPI.appendConfigProperties(props);
    }

    /**
     * Append config defaults to a supplied list
     * @param inDefaults the defaults to append to
     * @returns {Object}
     */
    static appendDefaults(inDefaults) {

        const defaults = {
            onError: 'abort'
        };

        let defs;

        if(inDefaults) {
            defs = Object.assign({}, inDefaults, defaults);
        } else {
            defs = Object.assign({}, defaults);
        }

        return BaseRuleAPI.appendDefaults(defs);
    }

    /**
     * The rule type.  Used by validator to determine if there is a match on the required type.
     * Should be overridden.
     * @returns {string}
     */
    static get Type() {
        return "parser_rule";
    }

    /**
     * The required parser type.  Used by validator determine if there is a match on the required type.
     * Should be overridden.
     * @returns {string}
     */
    static get Parser() {
        return "parser";
    }

    /**
     * A parser is required.  Used by the validator when loading this rule.
     * @returns {boolean}
     */
    static get NeedsParser() {
        return true;
    }

    /**
     * The list of config properties.  Used by the UI for display.
     * @returns {Array}
     * @constructor
     */
    static get ConfigProperties() {
        return this.appendConfigProperties();
    }

    /**
     * The default values for configuration.
     * @returns {{}}
     * @constructor
     */
    static get ConfigDefaults() {
        return this.appendDefaults();
    }
}

module.exports = ParserRuleAPI;	// Export this so derived classes can extend it.

