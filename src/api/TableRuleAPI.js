const ErrorHandlerAPI = require('./errorHandlerAPI');

/**
 * This API class is used to describe the interface to rule operations. This base class can be used by rules that
 * interact with operators.
 */
class TableRuleAPI extends ErrorHandlerAPI {

    /**
     * The base constructor. This simply sets <code>this.config</code> to the passed in configuration object. This config object
     * will be the rule's individual configuration (if any) and additionally contain <code>RootDirectory</code> which defaults to
     * the application's root directory if not set, <code>TempDirectory</code> which defaults to the application's temporary
     * directory if not set, <code>OutputEncoding</code> which is set to the rule's Encoding if set or to the ruleset's Encoding
     * if set, and <code>utf8</code> if none are set, and <code>Encoding</code> which is set to the input file's encoding. (Note
     * the distinction between <code>Encoding</code> and <code>OutputEncoding</code>. <code>Encoding</code> is set to the source file's encoding and
     * <code>OutputEncoding</code> is set to the encoding of the file generated by the rule. In general these would be the same
     * but rule's may want to switch one uncommon encoding for another more common one.)
     * @param localConfig {object} the rule's configuration as defined in the ruleset file or a standalone config file.
     */
    constructor(localConfig) {
        super(localConfig);
    }

    /**
     * Derived classes should override this method if they need to do anything before the processing of the data starts.
     * <br/>Note that rules that use streams and modify the metadata, because of their asynchronous nature, should do so
     * in a <code>start()</code> method. Modifying the metdata any later could mean that the changes are not
     * applied until after the next rule needs the changes. However rules that use data objects or files are safe
     * to modify metadata at any point, in the <code>start()</code> or <code>finish()</code> methods since these
     * rules would run synchronously.
     * @param tableParser {TableParserAPI} the parser for this rule
     */
    start(tableParser) {
        // Do any pre-processing.
    }

    /**
     * Derived classes should override this method if they need to do anything after the processing of records is complete.
     * @see {@link CSVRuleAPI#start|start}
     */
    finish() {
        // Do any post-processing.
    }

    /**
     * Derived classes should implement this method to process individual records.
     * @param record {array} one record from the csv file.
     * @param rowId {object | number} row indicator, usually the row number
     * @returns {array} a record, either the original one if no modifications were carried out or a new one.
     */
    processRecord(record, rowId) {
        // Process the record and return the new record.
        return record;
    }

    /**
     * Derived classes can implement this method to return true if they need the header rows
     * @returns {boolean} true if header rows should be passed to the processRecord method
     */
    get processHeaderRows() {
        return false;
    }

    static get Type() {
        return "table_rule";
    }

    static get Parser() {
        return "table_parser";
    }

    static get NeedsParser() {
        return true;
    }
}

module.exports = TableRuleAPI;	// Export this so derived classes can extend it.

